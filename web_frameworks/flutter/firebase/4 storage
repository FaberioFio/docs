### Indexs
* Features
* Reference
* Download URLs
* Tasks
* Pause, Resume, Cancel Tasks
* Listing files & directories

### Features
- Can create multiple buckets per project

#### Reference

- pointer to a file alreadly existed or not existed yet
`Reference ref = FirebaseStorage.instance.`ref('doc.txt');

- use ref() to point to the root
`Reference ref = FirebaseStorage.instance.ref();`

- use child() to point to the nested dir or files
```
Reference ref = FirebaseStorage.instance.ref('images/some_file.png');

or

Reference ref = FirebaseStorage.instance.ref().child('images').child('some_file.png');
```


#### Download URLs



#### Uploading Files

S1. File file = File(filePath)

- upload on-device files

Use `path_provider` to generate a file path

```dart
import 'package:path_provider/path_provider.dart';

Future<void> uploadExample() async {
  Directory appDocDir = await getApplicationDocumentsDirectory();
  String filePath = '${appDocDir.absolute}/file-to-upload.png';
  // ...
  // e.g. await uploadFile(filePath);
}
```

S2. Adding metadata

```
SettableMetadata metadata = SettableMetadata(
  cacheControl: 'max-age=60',
  customMetadata: <String, String>{
    'userId': 'AB123'
  }

    )
```

S3. Uploading to firebase

- uploading files
```dart
Future<void> uploadFile(String filePath) async {
  File file = File(filePath);

  try {
    // This will return UploadTask instance
    // see more at below
    await firebase_storage.FirebaseStorage.instance
        .ref('uploads/file-to-upload.png')
        .putFile(file, orMetadataHere);
  } on firebase_core.FirebaseException catch (e) {
    // e.g, e.code == 'canceled'
  }
}
```
- Uploading from a string

use putString() mthod

- Uploading raw data

#### Handingling tasks

```dart
Future<void> uploadFile(String filePath) async {
  File file = File(filePath);

  try {
    await firebase_storage.FirebaseStorage.instance
        .ref('uploads/file-to-upload.png')
        .putFile(file);
  } on firebase_core.FirebaseException catch (e) {
    // e.g, e.code == 'canceled'
  }
}
```

```
The above  will return a `UploadTask` or `DownloadTask`.

- Tasks provide the ability to *control how the file is being uploaded/downloaded* and provides metadata on the state of the task (e.g. progress status).

```dart
Future<void> handleTaskExample1() async {
  firebase_storage.UploadTask task = firebase_storage.FirebaseStorage.instance
      .ref('uploads/hello-world.txt')
      .putString('Hello World');

  try {
    // Storage tasks function as a Delegating Future so we can await them.
    firebase_storage.TaskSnapshot snapshot = await task;
    print('Uploaded ${snapshot.bytesTransferred} bytes.');
  } on firebase_core.FirebaseException catch (e) {
    // The final snapshot is also available on the task via `.snapshot`,
    // this can include 2 additional states, `TaskState.error` & `TaskState.canceled`
    print(task.snapshot);

    if (e.code == 'permission-denied') {
      print('User does not have permission to upload to this reference.');
    }
    // ...
  }
}
```

#### Pause, Resume, Cancel Tasks
#### Listing files & directories
```
Future<void> viewImage(
string downloadURL = await FirebaseStorage.instance.ref().child('image.png')
.getDownloadURL();

Image.network(downloadURL);
)
```
